# PutPlace Configuration Example
# Copy this file to .env and update with your values
# IMPORTANT: Never commit .env to version control!

# =============================================================================
# MongoDB Configuration
# =============================================================================
MONGODB_URL=mongodb://localhost:27017
MONGODB_DATABASE=putplace
MONGODB_COLLECTION=file_metadata

# =============================================================================
# API Configuration
# =============================================================================
API_TITLE=PutPlace API
API_VERSION=0.1.0
API_DESCRIPTION=File metadata storage API

# =============================================================================
# Storage Backend Configuration
# =============================================================================

# Storage backend type: "local" or "s3"
STORAGE_BACKEND=local

# Local Storage Settings (used when STORAGE_BACKEND=local)
STORAGE_PATH=/var/putplace/files

# S3 Storage Settings (used when STORAGE_BACKEND=s3)
S3_BUCKET_NAME=my-putplace-bucket
S3_REGION_NAME=us-east-1
S3_PREFIX=files/

# =============================================================================
# AWS Credentials (Optional - see SECURITY.md for best practices)
# =============================================================================

# RECOMMENDED APPROACHES (in order of preference):
#
# 1. IAM ROLES (Best for production on AWS)
#    - No configuration needed!
#    - Just attach IAM role to EC2/ECS/Lambda
#    - Leave all AWS_* variables commented out
#
# 2. AWS PROFILE (Good for on-premises or multi-account)
#    - Store credentials in ~/.aws/credentials
#    - Use named profile:
#    AWS_PROFILE=putplace-prod
#
# 3. DEFAULT CREDENTIAL CHAIN (Good for development)
#    - Uses ~/.aws/credentials default profile
#    - Leave all AWS_* variables commented out
#
# 4. EXPLICIT CREDENTIALS (Not recommended - use only if necessary)
#    - Uncommenting these will override profile and IAM role
#    - AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
#    - AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

# AWS Profile (recommended for on-premises)
# AWS_PROFILE=putplace-prod

# Explicit AWS credentials (NOT RECOMMENDED - use IAM roles or profiles instead)
# AWS_ACCESS_KEY_ID=
# AWS_SECRET_ACCESS_KEY=

# =============================================================================
# Configuration Examples
# =============================================================================

# Example 1: Local Storage (Development)
# -----------------------------------------------------------------------------
# STORAGE_BACKEND=local
# STORAGE_PATH=/tmp/putplace-dev
# MONGODB_URL=mongodb://localhost:27017
# MONGODB_DATABASE=putplace_dev

# Example 2: S3 Storage with IAM Role (Production on AWS)
# -----------------------------------------------------------------------------
# STORAGE_BACKEND=s3
# S3_BUCKET_NAME=putplace-prod-bucket
# S3_REGION_NAME=us-east-1
# # No AWS credentials needed - uses IAM role attached to EC2/ECS instance

# Example 3: S3 Storage with AWS Profile (Production on-premises)
# -----------------------------------------------------------------------------
# STORAGE_BACKEND=s3
# S3_BUCKET_NAME=putplace-prod-bucket
# S3_REGION_NAME=us-west-2
# AWS_PROFILE=putplace-prod
# # Credentials stored in ~/.aws/credentials file

# Example 4: S3 Storage with Environment Variables (CI/CD)
# -----------------------------------------------------------------------------
# STORAGE_BACKEND=s3
# S3_BUCKET_NAME=putplace-ci-bucket
# S3_REGION_NAME=us-east-1
# # AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY set by CI/CD system

# =============================================================================
# Security Notes
# =============================================================================
#
# 1. Never commit .env file to version control
#    - Add .env to .gitignore (already done)
#
# 2. Set restrictive file permissions:
#    chmod 600 .env
#    chown putplace:putplace .env
#
# 3. Use different configurations for dev/staging/production
#
# 4. For production deployments, see SECURITY.md for best practices
#
# 5. Prefer IAM roles > AWS profiles > environment variables > hardcoded credentials
#
